// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"gitee.com/flycash/ws-gateway"
	"gitee.com/flycash/ws-gateway/api/proto/gen/gatewayapi/v1"
	"gitee.com/flycash/ws-gateway/internal/event"
	"gitee.com/flycash/ws-gateway/internal/limiter"
	"gitee.com/flycash/ws-gateway/internal/link"
	"gitee.com/flycash/ws-gateway/ioc"
	"gitee.com/flycash/ws-gateway/pkg/jwt"
	"gitee.com/flycash/ws-gateway/pkg/scaler"
	"github.com/cenkalti/backoff/v5"
	"github.com/ecodeclub/ecache"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func InitApp(nodeInfo *gatewayapiv1.Node) App {
	cmdable := ioc.InitRedisCmd()
	cache := ioc.InitRedisCache(cmdable)
	userToken := ioc.InitUserToken()
	codec := ioc.InitSerializer()
	component := ioc.InitEtcdClient()
	mq := ioc.InitMQ()
	userActionEventProducer := ioc.InitUserActionEventProducer(mq)
	limiter := ioc.InitRateLimiter()
	linkEventHandlerWrapper := ioc.InitLinkEventHandlerWrapper(cache, codec, component, userActionEventProducer, limiter)
	serviceRegistry := ioc.InitRegistry(component)
	manager := ioc.InitLinkManager(codec)
	tokenLimiter := ioc.InitTokenLimiter()
	exponentialBackOff := ioc.InitExponentialBackOff()
	v := ioc.InitConsumers(mq, nodeInfo)
	scaleUpEventProducer := ioc.InitScaleUpEventProducer(mq)
	client := ioc.InitDockerClient()
	scaler := ioc.InitDockerScaler(client, component, serviceRegistry, nodeInfo)
	v2 := convertToWebsocketComponents(nodeInfo, cache, cmdable, userToken, linkEventHandlerWrapper, serviceRegistry, manager, tokenLimiter, exponentialBackOff, v, scaleUpEventProducer, scaler)
	app := App{
		OrderServer: v2,
	}
	return app
}

// wire.go:

type App struct {
	OrderServer []gateway.Server
}

func convertToWebsocketComponents(
	nodeInfo *gatewayapiv1.Node,
	c ecache.Cache,
	rdb redis.Cmdable,
	userToken *jwt.UserToken,
	wrapper *gateway.LinkEventHandlerWrapper,
	registry gateway.ServiceRegistry,
	linkManager *link.Manager,
	tokenLimiter *limiter.TokenLimiter, backoff2 *backoff.ExponentialBackOff,
	consumers map[string]*event.Consumer,
	producer event.ScaleUpEventProducer, scaler2 scaler.Scaler,

) []gateway.Server {
	configKey := "server.websocket"
	s := make([]gateway.Server, 0, 2)

	s = append(s, ioc.InitWebSocketServer(
		configKey,
		nodeInfo,
		c,
		rdb,
		userToken,
		wrapper,
		registry,
		linkManager,
		tokenLimiter, backoff2, consumers,
	))
	s = append(s, ioc.InitWebhookServer(nodeInfo, registry, linkManager, producer, scaler2))

	return s
}
