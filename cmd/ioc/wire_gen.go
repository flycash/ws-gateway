// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"gitee.com/flycash/ws-gateway"
	"gitee.com/flycash/ws-gateway/api/proto/gen/gatewayapi/v1"
	"gitee.com/flycash/ws-gateway/internal/limiter"
	"gitee.com/flycash/ws-gateway/ioc"
	"gitee.com/flycash/ws-gateway/pkg/jwt"
	"github.com/cenkalti/backoff/v5"
	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func InitApp(nodeInfo *gatewayapiv1.Node) App {
	mq := ioc.InitMQ()
	cmdable := ioc.InitRedisCmd()
	cache := ioc.InitRedisCache(cmdable)
	userToken := ioc.InitUserToken()
	codec := ioc.InitSerializer()
	component := ioc.InitEtcdClient()
	linkEventHandlerWrapper := ioc.InitLinkEventHandlerWrapper(cache, codec, component, mq)
	serviceRegistry := ioc.InitRegistry(component)
	linkManager := ioc.InitLinkManager(codec)
	tokenLimiter := ioc.InitTokenLimiter()
	exponentialBackOff := ioc.InitExponentialBackOff()
	v := convertToWebsocketComponents(nodeInfo, mq, cache, cmdable, userToken, linkEventHandlerWrapper, serviceRegistry, linkManager, tokenLimiter, exponentialBackOff)
	app := App{
		OrderServer: v,
	}
	return app
}

// wire.go:

type App struct {
	OrderServer []gateway.Server
}

func convertToWebsocketComponents(
	nodeInfo *gatewayapiv1.Node,
	messageQueue mq.MQ,
	c ecache.Cache,
	rdb redis.Cmdable,
	userToken *jwt.UserToken,
	wrapper *gateway.LinkEventHandlerWrapper,
	registry gateway.ServiceRegistry,
	linkManager gateway.LinkManager,
	tokenLimiter *limiter.TokenLimiter, backoff2 *backoff.ExponentialBackOff,
) []gateway.Server {
	configKey := "server.websocket"
	s := make([]gateway.Server, 0, 1)

	s = append(s, ioc.InitWebSocketServer(
		configKey,
		nodeInfo,
		messageQueue,
		c,
		rdb,
		userToken,
		wrapper,
		registry,
		linkManager,
		tokenLimiter, backoff2,
	))

	return s
}
