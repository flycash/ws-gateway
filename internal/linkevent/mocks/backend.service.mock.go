// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/gatewayapi/v1/message_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/linkevent/mocks/backend.service.mock.go -package=mocks -source=./api/proto/gen/gatewayapi/v1/message_grpc.pb.go BackendServiceClient, BackendServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gatewayapiv1 "gitee.com/flycash/ws-gateway/api/proto/gen/gatewayapi/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBackendServiceClient is a mock of BackendServiceClient interface.
type MockBackendServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackendServiceClientMockRecorder
	isgomock struct{}
}

// MockBackendServiceClientMockRecorder is the mock recorder for MockBackendServiceClient.
type MockBackendServiceClientMockRecorder struct {
	mock *MockBackendServiceClient
}

// NewMockBackendServiceClient creates a new mock instance.
func NewMockBackendServiceClient(ctrl *gomock.Controller) *MockBackendServiceClient {
	mock := &MockBackendServiceClient{ctrl: ctrl}
	mock.recorder = &MockBackendServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendServiceClient) EXPECT() *MockBackendServiceClientMockRecorder {
	return m.recorder
}

// OnReceive mocks base method.
func (m *MockBackendServiceClient) OnReceive(ctx context.Context, in *gatewayapiv1.OnReceiveRequest, opts ...grpc.CallOption) (*gatewayapiv1.OnReceiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnReceive", varargs...)
	ret0, _ := ret[0].(*gatewayapiv1.OnReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockBackendServiceClientMockRecorder) OnReceive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockBackendServiceClient)(nil).OnReceive), varargs...)
}

// MockBackendServiceServer is a mock of BackendServiceServer interface.
type MockBackendServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackendServiceServerMockRecorder
	isgomock struct{}
}

// MockBackendServiceServerMockRecorder is the mock recorder for MockBackendServiceServer.
type MockBackendServiceServerMockRecorder struct {
	mock *MockBackendServiceServer
}

// NewMockBackendServiceServer creates a new mock instance.
func NewMockBackendServiceServer(ctrl *gomock.Controller) *MockBackendServiceServer {
	mock := &MockBackendServiceServer{ctrl: ctrl}
	mock.recorder = &MockBackendServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendServiceServer) EXPECT() *MockBackendServiceServerMockRecorder {
	return m.recorder
}

// OnReceive mocks base method.
func (m *MockBackendServiceServer) OnReceive(arg0 context.Context, arg1 *gatewayapiv1.OnReceiveRequest) (*gatewayapiv1.OnReceiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReceive", arg0, arg1)
	ret0, _ := ret[0].(*gatewayapiv1.OnReceiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockBackendServiceServerMockRecorder) OnReceive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockBackendServiceServer)(nil).OnReceive), arg0, arg1)
}

// MockUnsafeBackendServiceServer is a mock of UnsafeBackendServiceServer interface.
type MockUnsafeBackendServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBackendServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeBackendServiceServerMockRecorder is the mock recorder for MockUnsafeBackendServiceServer.
type MockUnsafeBackendServiceServerMockRecorder struct {
	mock *MockUnsafeBackendServiceServer
}

// NewMockUnsafeBackendServiceServer creates a new mock instance.
func NewMockUnsafeBackendServiceServer(ctrl *gomock.Controller) *MockUnsafeBackendServiceServer {
	mock := &MockUnsafeBackendServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBackendServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBackendServiceServer) EXPECT() *MockUnsafeBackendServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBackendServiceServer mocks base method.
func (m *MockUnsafeBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBackendServiceServer")
}

// mustEmbedUnimplementedBackendServiceServer indicates an expected call of mustEmbedUnimplementedBackendServiceServer.
func (mr *MockUnsafeBackendServiceServerMockRecorder) mustEmbedUnimplementedBackendServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBackendServiceServer", reflect.TypeOf((*MockUnsafeBackendServiceServer)(nil).mustEmbedUnimplementedBackendServiceServer))
}

// MockPushServiceClient is a mock of PushServiceClient interface.
type MockPushServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPushServiceClientMockRecorder
	isgomock struct{}
}

// MockPushServiceClientMockRecorder is the mock recorder for MockPushServiceClient.
type MockPushServiceClientMockRecorder struct {
	mock *MockPushServiceClient
}

// NewMockPushServiceClient creates a new mock instance.
func NewMockPushServiceClient(ctrl *gomock.Controller) *MockPushServiceClient {
	mock := &MockPushServiceClient{ctrl: ctrl}
	mock.recorder = &MockPushServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushServiceClient) EXPECT() *MockPushServiceClientMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockPushServiceClient) Push(ctx context.Context, in *gatewayapiv1.PushRequest, opts ...grpc.CallOption) (*gatewayapiv1.PushResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*gatewayapiv1.PushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockPushServiceClientMockRecorder) Push(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPushServiceClient)(nil).Push), varargs...)
}

// MockPushServiceServer is a mock of PushServiceServer interface.
type MockPushServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPushServiceServerMockRecorder
	isgomock struct{}
}

// MockPushServiceServerMockRecorder is the mock recorder for MockPushServiceServer.
type MockPushServiceServerMockRecorder struct {
	mock *MockPushServiceServer
}

// NewMockPushServiceServer creates a new mock instance.
func NewMockPushServiceServer(ctrl *gomock.Controller) *MockPushServiceServer {
	mock := &MockPushServiceServer{ctrl: ctrl}
	mock.recorder = &MockPushServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushServiceServer) EXPECT() *MockPushServiceServerMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockPushServiceServer) Push(arg0 context.Context, arg1 *gatewayapiv1.PushRequest) (*gatewayapiv1.PushResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*gatewayapiv1.PushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockPushServiceServerMockRecorder) Push(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPushServiceServer)(nil).Push), arg0, arg1)
}

// MockUnsafePushServiceServer is a mock of UnsafePushServiceServer interface.
type MockUnsafePushServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePushServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePushServiceServerMockRecorder is the mock recorder for MockUnsafePushServiceServer.
type MockUnsafePushServiceServerMockRecorder struct {
	mock *MockUnsafePushServiceServer
}

// NewMockUnsafePushServiceServer creates a new mock instance.
func NewMockUnsafePushServiceServer(ctrl *gomock.Controller) *MockUnsafePushServiceServer {
	mock := &MockUnsafePushServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePushServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePushServiceServer) EXPECT() *MockUnsafePushServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPushServiceServer mocks base method.
func (m *MockUnsafePushServiceServer) mustEmbedUnimplementedPushServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPushServiceServer")
}

// mustEmbedUnimplementedPushServiceServer indicates an expected call of mustEmbedUnimplementedPushServiceServer.
func (mr *MockUnsafePushServiceServerMockRecorder) mustEmbedUnimplementedPushServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPushServiceServer", reflect.TypeOf((*MockUnsafePushServiceServer)(nil).mustEmbedUnimplementedPushServiceServer))
}
