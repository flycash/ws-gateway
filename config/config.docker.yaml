log:
  debug: true

redis:
  # redis 服务的地址
  addr: "redis:6379"

mq:
  kafka:
    network: "tcp"
    addr: "kafka:9094" # 注意: docker-compose 里 kafka 内部端口是 9094

etcd:
  addrs:
    # etcd 地址也从环境变量获取
    - "etcd:2379"
  connectTimeout: "1s"
  secure: false

cache:
  local:
    capacity: 1000000
  requestTimeout: 3000000000
  valueExpiration: 600000000000

server:
  webhook:
    port: 8001
    rebalancePercent: 0.5
  governor:
    host: "0.0.0.0"
    port: 9003
  websocket:
    host: "0.0.0.0"
    port: 9002
    weight: 1
    labels:
      - "core"
    capacity: &cap 10
    # 序列化协议：支持 json, proto
    serializer: "json"
    # 批处理配置
    batch:
      # 批次大小阈值
      size: 10
      # 批次超时时间（500ms）
      timeout: 500000000  # 500ms in nanoseconds
    compression:
      # 是否启用 permessage-deflate 压缩扩展
      enabled: true
      # 服务端压缩时使用的滑动窗口大小 取值范围: 8-15= 2^8 - 2^15 = 256B - 32KB
      serverMaxWindow: 15
      # 客户端压缩时使用的滑动窗口大小 取值范围: 8-15= 2^8 - 2^15 = 256B - 32KB
      clientMaxWindow: 15
      # 上下文接管: 在多条消息间保持压缩字典，利用消息间的重复内容 false 表示启用上下文接管
      serverNoContext: false
      clientNoContext: false
      level: 6
    # 消息体加密配置
    encrypt:
      # 是否启用
      enabled: true
      algorithm: "aes"  # 支持: aes, chacha20poly1305
      key: "1234567890abcdef1234567890abcdef"  # ChaCha20/AES-256需要32字节密钥
      iv: ""  # 初始化向量，留空时自动生成
    autoCloseLink:
      idleTimeout: 10000000000
      idleScanInterval: 5000000000
    gracefulCloseTimeout: 30000000000
    registry:
      updateNodeStateInterval: 5000000000
      retryStrategy:
        initInterval: 1000000000
        maxInterval: 3000000000
        maxRetries: 3
      keepAlive:
        retryInterval: 1000000000
        maxRetries: 3
    tokenLimiter:
      initialCapacity: 1
      maxCapacity: *cap
      increaseStep: 1
      increaseInterval: 2000000000
    backoff:
      initialInterval: 1000000000
      maxInterval: 3000000000
    limit:
      rate: 1 # 每秒请求数
      burst: 2 # 令牌桶容量

backend:
  services:
    etcdKey: "gateway.backend.services"

pushMessageEvent:
  topic: "push_message_event"
  partitions: 2

userActionEvent:
  topic: "gateway_users_action"
  partitions: 2

scaleUpEvent:
  topic: "scale_up_event"
  partitions: 2

link:
  timeout:
    read: 3000000000
    write: 10000000000
  buffer:
    receiveBufferSize: 256
    sendBufferSize: 256
  retryStrategy:
    initInterval: 1000000000
    maxInterval: 3000000000
    maxRetries: 3
  limit:
    rate: 2 # 每秒请求数
  eventHandler:
    requestTimeout: 3000000000
    retryStrategy:
      initInterval: 1000000000
      maxInterval: 3000000000
      maxRetries: 3
    pushMessage:
      retryInterval: 10000000000  # 1分钟
      maxRetries: 6

# Docker 扩容配置
docker:
  compose_project: "ws-gateway"