// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/msg/v1/msg_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./api/proto/gen/msg/v1/msg_grpc.pb.go -destination ./websocket/linkevent/mocks/msgv1_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	msgv1 "gitee.com/flycash/ws-gateway/api/proto/gen/msg/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMessageServiceClient is a mock of MessageServiceClient interface.
type MockMessageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceClientMockRecorder
	isgomock struct{}
}

// MockMessageServiceClientMockRecorder is the mock recorder for MockMessageServiceClient.
type MockMessageServiceClientMockRecorder struct {
	mock *MockMessageServiceClient
}

// NewMockMessageServiceClient creates a new mock instance.
func NewMockMessageServiceClient(ctrl *gomock.Controller) *MockMessageServiceClient {
	mock := &MockMessageServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceClient) EXPECT() *MockMessageServiceClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageServiceClient) Send(ctx context.Context, in *msgv1.SendRequest, opts ...grpc.CallOption) (*msgv1.SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*msgv1.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageServiceClientMockRecorder) Send(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageServiceClient)(nil).Send), varargs...)
}

// MockMessageServiceServer is a mock of MessageServiceServer interface.
type MockMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceServerMockRecorder
	isgomock struct{}
}

// MockMessageServiceServerMockRecorder is the mock recorder for MockMessageServiceServer.
type MockMessageServiceServerMockRecorder struct {
	mock *MockMessageServiceServer
}

// NewMockMessageServiceServer creates a new mock instance.
func NewMockMessageServiceServer(ctrl *gomock.Controller) *MockMessageServiceServer {
	mock := &MockMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceServer) EXPECT() *MockMessageServiceServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageServiceServer) Send(arg0 context.Context, arg1 *msgv1.SendRequest) (*msgv1.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*msgv1.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageServiceServerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageServiceServer)(nil).Send), arg0, arg1)
}

// MockUnsafeMessageServiceServer is a mock of UnsafeMessageServiceServer interface.
type MockUnsafeMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMessageServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeMessageServiceServerMockRecorder is the mock recorder for MockUnsafeMessageServiceServer.
type MockUnsafeMessageServiceServerMockRecorder struct {
	mock *MockUnsafeMessageServiceServer
}

// NewMockUnsafeMessageServiceServer creates a new mock instance.
func NewMockUnsafeMessageServiceServer(ctrl *gomock.Controller) *MockUnsafeMessageServiceServer {
	mock := &MockUnsafeMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMessageServiceServer) EXPECT() *MockUnsafeMessageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMessageServiceServer mocks base method.
func (m *MockUnsafeMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServiceServer")
}

// mustEmbedUnimplementedMessageServiceServer indicates an expected call of mustEmbedUnimplementedMessageServiceServer.
func (mr *MockUnsafeMessageServiceServerMockRecorder) mustEmbedUnimplementedMessageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServiceServer", reflect.TypeOf((*MockUnsafeMessageServiceServer)(nil).mustEmbedUnimplementedMessageServiceServer))
}
