syntax = "proto3";

package gatewayapi.v1;

option go_package = "v1/gatewayapi;gatewayapiv1";

// 通用协议格式
// 上行消息说明:
//    上行请求消息是指前端主动发送给后端的消息
//    上行确认消息是指网关对收到的“上行请求消息”的确认消息
// 下行消息说明:
//    下行(推送)请求消息是指业务后端主动发送给网关的消息
//    下行(推送)确认消息是指前端对收到的"下行(推送)请求消息"的确认消息
// 以 A -> B 为例
message Message {
  enum CommandType {
    COMMAND_TYPE_INVALID_UNSPECIFIED = 0;
    COMMAND_TYPE_HEARTBEAT = 1; // 心跳消息,body为空即可,前端主动发送、后端原样返回
    // A -> gateway 的消息 (Client <-> Gateway(grpc client) -> Backend)
    COMMAND_TYPE_UPSTREAM_MESSAGE = 2; // 上行消息请求
    COMMAND_TYPE_UPSTREAM_ACK = 3; // 上行消息响应
    // gateway -> B 的消息 (Backend -> Gateway -> Client)
    COMMAND_TYPE_DOWNSTREAM_MESSAGE = 4; // 下行推送请求
    COMMAND_TYPE_DOWNSTREAM_ACK = 5; // 下行推送响应
    // 网关下发给前端的重定向指令，通常用于网关优雅关闭，前端不需要响应
    COMMAND_TYPE_REDIRECT = 6;
    // 网关下发给前端的限流指令，前端不需要响应
    COMMAND_TYPE_RATE_LIMIT_EXCEEDED = 7;
    // 添加其他命令类型
  }
  CommandType cmd = 1; // 消息类型
  // A -> gateway，是 A 生成；
  // bizId（token中获取） + key 唯一
  string key = 2; // UUID, 后续当前端支持超时重传,后端需要用此 key 来去重
  bytes body = 3; // 业务相关的具体消息体

  //  enum SerializeType {
  //    SERIALIZE_TYPE_INVALID_UNSPECIFIED = 0;
  //    SERIALIZE_TYPE_JSON = 1;
  //    SERIALIZE_TYPE_PROTOBUF = 2;
  //  }
  //  SerializeType serialize_type = 5; // 序列化类型
}

// BackendService 是最终处理请求的业务后端要实现的服务，gateway在收到请求后
// 根据上面的 Message 中的biz_id找到对应的GRPC Client并OnReceive发送请求
service BackendService {
  rpc OnReceive(OnReceiveRequest) returns (OnReceiveResponse);
  // 当业务方需要的时候，可以将下行消息的结果通知业务方
  //  rpc OnPushed(OnPushedRequest) returns (OnPushedResponse);
}

message OnReceiveRequest {
  string key = 1;
  bytes body = 2;
}

message OnReceiveResponse {
  int64 msg_id = 1; // 业务方生成的 ID，其实跟 gateway 没什么关系
  int64 biz_id = 2;
}

// BatchBackendService 是业务后端可选实现的批量处理服务
// 网关会将同一个BizID的消息聚合后，通过此服务批量发送给业务后端
// 相比单个处理，批量处理可以显著提升吞吐量，减少网络开销
// 业务后端可以选择实现此服务来获得更好的性能
service BatchBackendService {
  // BatchOnReceive 批量处理上行消息
  // 网关会将满足以下任一条件的消息聚合后调用此接口：
  // 1. 同一BizID下消息数量达到配置的阈值
  // 2. 同一BizID下首个消息等待时间超过配置的超时时间
  // 请求和响应的数组必须一一对应，顺序必须保持一致
  rpc BatchOnReceive(BatchOnReceiveRequest) returns (BatchOnReceiveResponse);
}

message BatchOnReceiveRequest {
  repeated OnReceiveRequest reqs = 1; // 批量请求列表，同属于一个BizID
}

message BatchOnReceiveResponse {
  repeated OnReceiveResponse res = 1; // 批量响应列表，必须与请求列表一一对应且顺序一致
}

// PushMessage 是业务后端主动向gateway发送消息时所用的消息格式
// 具体的通信方式有以下两种：
// 1. 业务方发送PushMessage消息到Kafka中的指定topic，gateway监听并消费
// 2. gateway 实现下方 PushService，业务后端通过GRPC客户端发送请求
message PushMessage {
  string key = 1; // 唯一标识用于去重
  int64 biz_id = 2; // biz_id 记录一下哪个业务方过来的
  int64 receiver_id = 3; // 目前来看，只有用户 ID，要根据这个和 biz_id 来找到 websocket 连接并把消息发送出去
  bytes body = 4; // 业务相关的具体消息体
}

// PushService 如果业务后端与gateway之间不用Kafka通信方式，那么gateway就应该实现该服务
service PushService {
  rpc Push(PushRequest) returns (PushResponse);
}

message PushRequest {
  PushMessage msg = 1;
}

message PushResponse {}
