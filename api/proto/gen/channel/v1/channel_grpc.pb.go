// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: channel/v1/channel.proto

package channelv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelService_CreateChannel_FullMethodName                    = "/channel.v1.ChannelService/CreateChannel"
	ChannelService_GetInviteLink_FullMethodName                    = "/channel.v1.ChannelService/GetInviteLink"
	ChannelService_JoinChannel_FullMethodName                      = "/channel.v1.ChannelService/JoinChannel"
	ChannelService_JoinChannelByLink_FullMethodName                = "/channel.v1.ChannelService/JoinChannelByLink"
	ChannelService_QuitChannel_FullMethodName                      = "/channel.v1.ChannelService/QuitChannel"
	ChannelService_DisbandChannel_FullMethodName                   = "/channel.v1.ChannelService/DisbandChannel"
	ChannelService_UpdateChannelInfo_FullMethodName                = "/channel.v1.ChannelService/UpdateChannelInfo"
	ChannelService_GetChannelInfo_FullMethodName                   = "/channel.v1.ChannelService/GetChannelInfo"
	ChannelService_GetChannelInfoByIds_FullMethodName              = "/channel.v1.ChannelService/GetChannelInfoByIds"
	ChannelService_GetChannelMembers_FullMethodName                = "/channel.v1.ChannelService/GetChannelMembers"
	ChannelService_CreateOneToOneChannel_FullMethodName            = "/channel.v1.ChannelService/CreateOneToOneChannel"
	ChannelService_CreateOneToOneChannelWith2UserID_FullMethodName = "/channel.v1.ChannelService/CreateOneToOneChannelWith2UserID"
	ChannelService_DisbandOneToOneChannel_FullMethodName           = "/channel.v1.ChannelService/DisbandOneToOneChannel"
)

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义聊天群组服务
type ChannelServiceClient interface {
	// 群组业务CRUD
	// tips：创建群组只暴露了不同方法，群的type属于channel服务内部逻辑，没暴露在接口里面，
	// 若新增群组type，这边就新增方法。比如rpc CreateRobotChannel(CreateRobotChannelRequest) returns (EmptyResponse);
	// 创建群组-C
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	GetInviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error)
	// 加入群组—U
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*JoinChannelResponse, error)
	JoinChannelByLink(ctx context.Context, in *JoinChannelByLinkRequest, opts ...grpc.CallOption) (*JoinChannelByLinkResponse, error)
	// 退群-U
	QuitChannel(ctx context.Context, in *QuitChannelRequest, opts ...grpc.CallOption) (*QuitChannelResponse, error)
	// 解散群组 解散英文Disband，接口命名贴近业务-U
	DisbandChannel(ctx context.Context, in *DisbandChannelRequest, opts ...grpc.CallOption) (*DisbandChannelResponse, error)
	// 修改群组基本信息-U
	UpdateChannelInfo(ctx context.Context, in *UpdateChannelInfoRequest, opts ...grpc.CallOption) (*UpdateChannelInfoResponse, error)
	// 查询群组基本信息-R
	GetChannelInfo(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*GetChannelInfoResponse, error)
	// 批量查询聊天基本信息
	GetChannelInfoByIds(ctx context.Context, in *GetChannelInfoByIdsRequest, opts ...grpc.CallOption) (*GetChannelInfoByIdsResponse, error)
	// 查询群组所有成员
	GetChannelMembers(ctx context.Context, in *GetChannelMembersRequest, opts ...grpc.CallOption) (*GetChannelMembersResponse, error)
	// 私聊业务CRUD
	// 发起单对单聊天（私聊）
	CreateOneToOneChannel(ctx context.Context, in *CreateOneToOneChannelRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelResponse, error)
	CreateOneToOneChannelWith2UserID(ctx context.Context, in *CreateOneToOneChannelWith2UserIDRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelWith2UserIDResponse, error)
	// 解散单对单聊天群组 （删除好友时调用）
	DisbandOneToOneChannel(ctx context.Context, in *DisbandOneToOneChannelRequest, opts ...grpc.CallOption) (*DisbandOneToOneChannelResponse, error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetInviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInviteLinkResponse)
	err := c.cc.Invoke(ctx, ChannelService_GetInviteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*JoinChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_JoinChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) JoinChannelByLink(ctx context.Context, in *JoinChannelByLinkRequest, opts ...grpc.CallOption) (*JoinChannelByLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChannelByLinkResponse)
	err := c.cc.Invoke(ctx, ChannelService_JoinChannelByLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) QuitChannel(ctx context.Context, in *QuitChannelRequest, opts ...grpc.CallOption) (*QuitChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuitChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_QuitChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) DisbandChannel(ctx context.Context, in *DisbandChannelRequest, opts ...grpc.CallOption) (*DisbandChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisbandChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_DisbandChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) UpdateChannelInfo(ctx context.Context, in *UpdateChannelInfoRequest, opts ...grpc.CallOption) (*UpdateChannelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelInfoResponse)
	err := c.cc.Invoke(ctx, ChannelService_UpdateChannelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoRequest, opts ...grpc.CallOption) (*GetChannelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelInfoResponse)
	err := c.cc.Invoke(ctx, ChannelService_GetChannelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannelInfoByIds(ctx context.Context, in *GetChannelInfoByIdsRequest, opts ...grpc.CallOption) (*GetChannelInfoByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelInfoByIdsResponse)
	err := c.cc.Invoke(ctx, ChannelService_GetChannelInfoByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannelMembers(ctx context.Context, in *GetChannelMembersRequest, opts ...grpc.CallOption) (*GetChannelMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelMembersResponse)
	err := c.cc.Invoke(ctx, ChannelService_GetChannelMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CreateOneToOneChannel(ctx context.Context, in *CreateOneToOneChannelRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOneToOneChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_CreateOneToOneChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CreateOneToOneChannelWith2UserID(ctx context.Context, in *CreateOneToOneChannelWith2UserIDRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelWith2UserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOneToOneChannelWith2UserIDResponse)
	err := c.cc.Invoke(ctx, ChannelService_CreateOneToOneChannelWith2UserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) DisbandOneToOneChannel(ctx context.Context, in *DisbandOneToOneChannelRequest, opts ...grpc.CallOption) (*DisbandOneToOneChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisbandOneToOneChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_DisbandOneToOneChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServiceServer is the server API for ChannelService service.
// All implementations should embed UnimplementedChannelServiceServer
// for forward compatibility.
//
// 定义聊天群组服务
type ChannelServiceServer interface {
	// 群组业务CRUD
	// tips：创建群组只暴露了不同方法，群的type属于channel服务内部逻辑，没暴露在接口里面，
	// 若新增群组type，这边就新增方法。比如rpc CreateRobotChannel(CreateRobotChannelRequest) returns (EmptyResponse);
	// 创建群组-C
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	GetInviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error)
	// 加入群组—U
	JoinChannel(context.Context, *JoinChannelRequest) (*JoinChannelResponse, error)
	JoinChannelByLink(context.Context, *JoinChannelByLinkRequest) (*JoinChannelByLinkResponse, error)
	// 退群-U
	QuitChannel(context.Context, *QuitChannelRequest) (*QuitChannelResponse, error)
	// 解散群组 解散英文Disband，接口命名贴近业务-U
	DisbandChannel(context.Context, *DisbandChannelRequest) (*DisbandChannelResponse, error)
	// 修改群组基本信息-U
	UpdateChannelInfo(context.Context, *UpdateChannelInfoRequest) (*UpdateChannelInfoResponse, error)
	// 查询群组基本信息-R
	GetChannelInfo(context.Context, *GetChannelInfoRequest) (*GetChannelInfoResponse, error)
	// 批量查询聊天基本信息
	GetChannelInfoByIds(context.Context, *GetChannelInfoByIdsRequest) (*GetChannelInfoByIdsResponse, error)
	// 查询群组所有成员
	GetChannelMembers(context.Context, *GetChannelMembersRequest) (*GetChannelMembersResponse, error)
	// 私聊业务CRUD
	// 发起单对单聊天（私聊）
	CreateOneToOneChannel(context.Context, *CreateOneToOneChannelRequest) (*CreateOneToOneChannelResponse, error)
	CreateOneToOneChannelWith2UserID(context.Context, *CreateOneToOneChannelWith2UserIDRequest) (*CreateOneToOneChannelWith2UserIDResponse, error)
	// 解散单对单聊天群组 （删除好友时调用）
	DisbandOneToOneChannel(context.Context, *DisbandOneToOneChannelRequest) (*DisbandOneToOneChannelResponse, error)
}

// UnimplementedChannelServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelServiceServer struct{}

func (UnimplementedChannelServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}

func (UnimplementedChannelServiceServer) GetInviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteLink not implemented")
}

func (UnimplementedChannelServiceServer) JoinChannel(context.Context, *JoinChannelRequest) (*JoinChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}

func (UnimplementedChannelServiceServer) JoinChannelByLink(context.Context, *JoinChannelByLinkRequest) (*JoinChannelByLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannelByLink not implemented")
}

func (UnimplementedChannelServiceServer) QuitChannel(context.Context, *QuitChannelRequest) (*QuitChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitChannel not implemented")
}

func (UnimplementedChannelServiceServer) DisbandChannel(context.Context, *DisbandChannelRequest) (*DisbandChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandChannel not implemented")
}

func (UnimplementedChannelServiceServer) UpdateChannelInfo(context.Context, *UpdateChannelInfoRequest) (*UpdateChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelInfo not implemented")
}

func (UnimplementedChannelServiceServer) GetChannelInfo(context.Context, *GetChannelInfoRequest) (*GetChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}

func (UnimplementedChannelServiceServer) GetChannelInfoByIds(context.Context, *GetChannelInfoByIdsRequest) (*GetChannelInfoByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfoByIds not implemented")
}

func (UnimplementedChannelServiceServer) GetChannelMembers(context.Context, *GetChannelMembersRequest) (*GetChannelMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMembers not implemented")
}

func (UnimplementedChannelServiceServer) CreateOneToOneChannel(context.Context, *CreateOneToOneChannelRequest) (*CreateOneToOneChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneToOneChannel not implemented")
}

func (UnimplementedChannelServiceServer) CreateOneToOneChannelWith2UserID(context.Context, *CreateOneToOneChannelWith2UserIDRequest) (*CreateOneToOneChannelWith2UserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneToOneChannelWith2UserID not implemented")
}

func (UnimplementedChannelServiceServer) DisbandOneToOneChannel(context.Context, *DisbandOneToOneChannelRequest) (*DisbandOneToOneChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandOneToOneChannel not implemented")
}
func (UnimplementedChannelServiceServer) testEmbeddedByValue() {}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetInviteLink(ctx, req.(*GetInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_JoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_JoinChannelByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).JoinChannelByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_JoinChannelByLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).JoinChannelByLink(ctx, req.(*JoinChannelByLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_QuitChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).QuitChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_QuitChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).QuitChannel(ctx, req.(*QuitChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_DisbandChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).DisbandChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_DisbandChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).DisbandChannel(ctx, req.(*DisbandChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_UpdateChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).UpdateChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_UpdateChannelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).UpdateChannelInfo(ctx, req.(*UpdateChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetChannelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetChannelInfoByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetChannelInfoByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetChannelInfoByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetChannelInfoByIds(ctx, req.(*GetChannelInfoByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetChannelMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetChannelMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetChannelMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetChannelMembers(ctx, req.(*GetChannelMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_CreateOneToOneChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneToOneChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreateOneToOneChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreateOneToOneChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreateOneToOneChannel(ctx, req.(*CreateOneToOneChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_CreateOneToOneChannelWith2UserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneToOneChannelWith2UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreateOneToOneChannelWith2UserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreateOneToOneChannelWith2UserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreateOneToOneChannelWith2UserID(ctx, req.(*CreateOneToOneChannelWith2UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_DisbandOneToOneChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandOneToOneChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).DisbandOneToOneChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_DisbandOneToOneChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).DisbandOneToOneChannel(ctx, req.(*DisbandOneToOneChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.v1.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelService_CreateChannel_Handler,
		},
		{
			MethodName: "GetInviteLink",
			Handler:    _ChannelService_GetInviteLink_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChannelService_JoinChannel_Handler,
		},
		{
			MethodName: "JoinChannelByLink",
			Handler:    _ChannelService_JoinChannelByLink_Handler,
		},
		{
			MethodName: "QuitChannel",
			Handler:    _ChannelService_QuitChannel_Handler,
		},
		{
			MethodName: "DisbandChannel",
			Handler:    _ChannelService_DisbandChannel_Handler,
		},
		{
			MethodName: "UpdateChannelInfo",
			Handler:    _ChannelService_UpdateChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelInfoByIds",
			Handler:    _ChannelService_GetChannelInfoByIds_Handler,
		},
		{
			MethodName: "GetChannelMembers",
			Handler:    _ChannelService_GetChannelMembers_Handler,
		},
		{
			MethodName: "CreateOneToOneChannel",
			Handler:    _ChannelService_CreateOneToOneChannel_Handler,
		},
		{
			MethodName: "CreateOneToOneChannelWith2UserID",
			Handler:    _ChannelService_CreateOneToOneChannelWith2UserID_Handler,
		},
		{
			MethodName: "DisbandOneToOneChannel",
			Handler:    _ChannelService_DisbandOneToOneChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/v1/channel.proto",
}
