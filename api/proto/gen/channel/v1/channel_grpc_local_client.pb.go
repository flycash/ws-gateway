// Code generated by protoc-gen-go-grpc-local-client. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-local-client v0.0.2
// - protoc             (unknown)
// source: channel/v1/channel.proto

package channelv1

import (
	context "context"

	grpc "google.golang.org/grpc"
)

var _ ChannelServiceClient = (*channelServiceLocalClient)(nil)

type channelServiceLocalClient struct {
	server ChannelServiceServer
}

func NewChannelServiceLocalClient(server ChannelServiceServer) ChannelServiceClient {
	return &channelServiceLocalClient{
		server: server,
	}
}

func (s *channelServiceLocalClient) CreateChannel(ctx context.Context, req *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	return s.server.CreateChannel(ctx, req)
}

func (s *channelServiceLocalClient) GetInviteLink(ctx context.Context, req *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error) {
	return s.server.GetInviteLink(ctx, req)
}

func (s *channelServiceLocalClient) JoinChannel(ctx context.Context, req *JoinChannelRequest, opts ...grpc.CallOption) (*JoinChannelResponse, error) {
	return s.server.JoinChannel(ctx, req)
}

func (s *channelServiceLocalClient) JoinChannelByLink(ctx context.Context, req *JoinChannelByLinkRequest, opts ...grpc.CallOption) (*JoinChannelByLinkResponse, error) {
	return s.server.JoinChannelByLink(ctx, req)
}

func (s *channelServiceLocalClient) QuitChannel(ctx context.Context, req *QuitChannelRequest, opts ...grpc.CallOption) (*QuitChannelResponse, error) {
	return s.server.QuitChannel(ctx, req)
}

func (s *channelServiceLocalClient) DisbandChannel(ctx context.Context, req *DisbandChannelRequest, opts ...grpc.CallOption) (*DisbandChannelResponse, error) {
	return s.server.DisbandChannel(ctx, req)
}

func (s *channelServiceLocalClient) UpdateChannelInfo(ctx context.Context, req *UpdateChannelInfoRequest, opts ...grpc.CallOption) (*UpdateChannelInfoResponse, error) {
	return s.server.UpdateChannelInfo(ctx, req)
}

func (s *channelServiceLocalClient) GetChannelInfo(ctx context.Context, req *GetChannelInfoRequest, opts ...grpc.CallOption) (*GetChannelInfoResponse, error) {
	return s.server.GetChannelInfo(ctx, req)
}

func (s *channelServiceLocalClient) GetChannelInfoByIds(ctx context.Context, req *GetChannelInfoByIdsRequest, opts ...grpc.CallOption) (*GetChannelInfoByIdsResponse, error) {
	return s.server.GetChannelInfoByIds(ctx, req)
}

func (s *channelServiceLocalClient) GetChannelMembers(ctx context.Context, req *GetChannelMembersRequest, opts ...grpc.CallOption) (*GetChannelMembersResponse, error) {
	return s.server.GetChannelMembers(ctx, req)
}

func (s *channelServiceLocalClient) CreateOneToOneChannel(ctx context.Context, req *CreateOneToOneChannelRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelResponse, error) {
	return s.server.CreateOneToOneChannel(ctx, req)
}

func (s *channelServiceLocalClient) CreateOneToOneChannelWith2UserID(ctx context.Context, req *CreateOneToOneChannelWith2UserIDRequest, opts ...grpc.CallOption) (*CreateOneToOneChannelWith2UserIDResponse, error) {
	return s.server.CreateOneToOneChannelWith2UserID(ctx, req)
}

func (s *channelServiceLocalClient) DisbandOneToOneChannel(ctx context.Context, req *DisbandOneToOneChannelRequest, opts ...grpc.CallOption) (*DisbandOneToOneChannelResponse, error) {
	return s.server.DisbandOneToOneChannel(ctx, req)
}
