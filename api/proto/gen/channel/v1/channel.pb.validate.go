// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: channel/v1/channel.proto

package channelv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChannelMultiError, or nil if none found.
func (m *Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	if len(errors) > 0 {
		return ChannelMultiError(errors)
	}

	return nil
}

// ChannelMultiError is an error wrapping multiple validation errors returned
// by Channel.ValidateAll() if the designated constraints aren't met.
type ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMultiError) AllErrors() []error { return m }

// ChannelValidationError is the validation error returned by Channel.Validate
// if the designated constraints aren't met.
type ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelValidationError) ErrorName() string { return "ChannelValidationError" }

// Error satisfies the builtin error interface
func (e ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelValidationError{}

// Validate checks the field values on ChannelPersonalInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelPersonalInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelPersonalInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelPersonalInfoMultiError, or nil if none found.
func (m *ChannelPersonalInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelPersonalInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Note

	// no validation rules for NicknameInChannel

	// no validation rules for Priority

	// no validation rules for Mute

	if len(errors) > 0 {
		return ChannelPersonalInfoMultiError(errors)
	}

	return nil
}

// ChannelPersonalInfoMultiError is an error wrapping multiple validation
// errors returned by ChannelPersonalInfo.ValidateAll() if the designated
// constraints aren't met.
type ChannelPersonalInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelPersonalInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelPersonalInfoMultiError) AllErrors() []error { return m }

// ChannelPersonalInfoValidationError is the validation error returned by
// ChannelPersonalInfo.Validate if the designated constraints aren't met.
type ChannelPersonalInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelPersonalInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelPersonalInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelPersonalInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelPersonalInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelPersonalInfoValidationError) ErrorName() string {
	return "ChannelPersonalInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelPersonalInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelPersonalInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelPersonalInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelPersonalInfoValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelRequestMultiError, or nil if none found.
func (m *CreateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateChannelRequestMultiError(errors)
	}

	return nil
}

// CreateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelRequestMultiError) AllErrors() []error { return m }

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on CreateChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelResponseMultiError, or nil if none found.
func (m *CreateChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChannelResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChannelResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChannelResponseValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChannelResponseMultiError(errors)
	}

	return nil
}

// CreateChannelResponseMultiError is an error wrapping multiple validation
// errors returned by CreateChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelResponseMultiError) AllErrors() []error { return m }

// CreateChannelResponseValidationError is the validation error returned by
// CreateChannelResponse.Validate if the designated constraints aren't met.
type CreateChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelResponseValidationError) ErrorName() string {
	return "CreateChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelResponseValidationError{}

// Validate checks the field values on GetInviteLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInviteLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInviteLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInviteLinkRequestMultiError, or nil if none found.
func (m *GetInviteLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInviteLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetInviteLinkRequestMultiError(errors)
	}

	return nil
}

// GetInviteLinkRequestMultiError is an error wrapping multiple validation
// errors returned by GetInviteLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInviteLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInviteLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInviteLinkRequestMultiError) AllErrors() []error { return m }

// GetInviteLinkRequestValidationError is the validation error returned by
// GetInviteLinkRequest.Validate if the designated constraints aren't met.
type GetInviteLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInviteLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInviteLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInviteLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInviteLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInviteLinkRequestValidationError) ErrorName() string {
	return "GetInviteLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInviteLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInviteLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInviteLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInviteLinkRequestValidationError{}

// Validate checks the field values on GetInviteLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInviteLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInviteLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInviteLinkResponseMultiError, or nil if none found.
func (m *GetInviteLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInviteLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return GetInviteLinkResponseMultiError(errors)
	}

	return nil
}

// GetInviteLinkResponseMultiError is an error wrapping multiple validation
// errors returned by GetInviteLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInviteLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInviteLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInviteLinkResponseMultiError) AllErrors() []error { return m }

// GetInviteLinkResponseValidationError is the validation error returned by
// GetInviteLinkResponse.Validate if the designated constraints aren't met.
type GetInviteLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInviteLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInviteLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInviteLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInviteLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInviteLinkResponseValidationError) ErrorName() string {
	return "GetInviteLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInviteLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInviteLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInviteLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInviteLinkResponseValidationError{}

// Validate checks the field values on JoinChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChannelRequestMultiError, or nil if none found.
func (m *JoinChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return JoinChannelRequestMultiError(errors)
	}

	return nil
}

// JoinChannelRequestMultiError is an error wrapping multiple validation errors
// returned by JoinChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChannelRequestMultiError) AllErrors() []error { return m }

// JoinChannelRequestValidationError is the validation error returned by
// JoinChannelRequest.Validate if the designated constraints aren't met.
type JoinChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChannelRequestValidationError) ErrorName() string {
	return "JoinChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChannelRequestValidationError{}

// Validate checks the field values on JoinChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChannelResponseMultiError, or nil if none found.
func (m *JoinChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinChannelResponseMultiError(errors)
	}

	return nil
}

// JoinChannelResponseMultiError is an error wrapping multiple validation
// errors returned by JoinChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type JoinChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChannelResponseMultiError) AllErrors() []error { return m }

// JoinChannelResponseValidationError is the validation error returned by
// JoinChannelResponse.Validate if the designated constraints aren't met.
type JoinChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChannelResponseValidationError) ErrorName() string {
	return "JoinChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChannelResponseValidationError{}

// Validate checks the field values on JoinChannelByLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinChannelByLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChannelByLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChannelByLinkRequestMultiError, or nil if none found.
func (m *JoinChannelByLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChannelByLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	// no validation rules for UserId

	if len(errors) > 0 {
		return JoinChannelByLinkRequestMultiError(errors)
	}

	return nil
}

// JoinChannelByLinkRequestMultiError is an error wrapping multiple validation
// errors returned by JoinChannelByLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type JoinChannelByLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChannelByLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChannelByLinkRequestMultiError) AllErrors() []error { return m }

// JoinChannelByLinkRequestValidationError is the validation error returned by
// JoinChannelByLinkRequest.Validate if the designated constraints aren't met.
type JoinChannelByLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChannelByLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChannelByLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChannelByLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChannelByLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChannelByLinkRequestValidationError) ErrorName() string {
	return "JoinChannelByLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinChannelByLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChannelByLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChannelByLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChannelByLinkRequestValidationError{}

// Validate checks the field values on JoinChannelByLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinChannelByLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChannelByLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChannelByLinkResponseMultiError, or nil if none found.
func (m *JoinChannelByLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChannelByLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinChannelByLinkResponseMultiError(errors)
	}

	return nil
}

// JoinChannelByLinkResponseMultiError is an error wrapping multiple validation
// errors returned by JoinChannelByLinkResponse.ValidateAll() if the
// designated constraints aren't met.
type JoinChannelByLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChannelByLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChannelByLinkResponseMultiError) AllErrors() []error { return m }

// JoinChannelByLinkResponseValidationError is the validation error returned by
// JoinChannelByLinkResponse.Validate if the designated constraints aren't met.
type JoinChannelByLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChannelByLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChannelByLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChannelByLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChannelByLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChannelByLinkResponseValidationError) ErrorName() string {
	return "JoinChannelByLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinChannelByLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChannelByLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChannelByLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChannelByLinkResponseValidationError{}

// Validate checks the field values on QuitChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuitChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuitChannelRequestMultiError, or nil if none found.
func (m *QuitChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return QuitChannelRequestMultiError(errors)
	}

	return nil
}

// QuitChannelRequestMultiError is an error wrapping multiple validation errors
// returned by QuitChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type QuitChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitChannelRequestMultiError) AllErrors() []error { return m }

// QuitChannelRequestValidationError is the validation error returned by
// QuitChannelRequest.Validate if the designated constraints aren't met.
type QuitChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitChannelRequestValidationError) ErrorName() string {
	return "QuitChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuitChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitChannelRequestValidationError{}

// Validate checks the field values on QuitChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuitChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuitChannelResponseMultiError, or nil if none found.
func (m *QuitChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuitChannelResponseMultiError(errors)
	}

	return nil
}

// QuitChannelResponseMultiError is an error wrapping multiple validation
// errors returned by QuitChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type QuitChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitChannelResponseMultiError) AllErrors() []error { return m }

// QuitChannelResponseValidationError is the validation error returned by
// QuitChannelResponse.Validate if the designated constraints aren't met.
type QuitChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitChannelResponseValidationError) ErrorName() string {
	return "QuitChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuitChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitChannelResponseValidationError{}

// Validate checks the field values on DisbandChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisbandChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisbandChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisbandChannelRequestMultiError, or nil if none found.
func (m *DisbandChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisbandChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return DisbandChannelRequestMultiError(errors)
	}

	return nil
}

// DisbandChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DisbandChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type DisbandChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisbandChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisbandChannelRequestMultiError) AllErrors() []error { return m }

// DisbandChannelRequestValidationError is the validation error returned by
// DisbandChannelRequest.Validate if the designated constraints aren't met.
type DisbandChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisbandChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisbandChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisbandChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisbandChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisbandChannelRequestValidationError) ErrorName() string {
	return "DisbandChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisbandChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisbandChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisbandChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisbandChannelRequestValidationError{}

// Validate checks the field values on DisbandChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisbandChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisbandChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisbandChannelResponseMultiError, or nil if none found.
func (m *DisbandChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisbandChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisbandChannelResponseMultiError(errors)
	}

	return nil
}

// DisbandChannelResponseMultiError is an error wrapping multiple validation
// errors returned by DisbandChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type DisbandChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisbandChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisbandChannelResponseMultiError) AllErrors() []error { return m }

// DisbandChannelResponseValidationError is the validation error returned by
// DisbandChannelResponse.Validate if the designated constraints aren't met.
type DisbandChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisbandChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisbandChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisbandChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisbandChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisbandChannelResponseValidationError) ErrorName() string {
	return "DisbandChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisbandChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisbandChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisbandChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisbandChannelResponseValidationError{}

// Validate checks the field values on UpdateChannelInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelInfoRequestMultiError, or nil if none found.
func (m *UpdateChannelInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChannelInfoRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChannelInfoRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelInfoRequestValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChannelInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelInfoRequestMultiError) AllErrors() []error { return m }

// UpdateChannelInfoRequestValidationError is the validation error returned by
// UpdateChannelInfoRequest.Validate if the designated constraints aren't met.
type UpdateChannelInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelInfoRequestValidationError) ErrorName() string {
	return "UpdateChannelInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelInfoRequestValidationError{}

// Validate checks the field values on UpdateChannelInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelInfoResponseMultiError, or nil if none found.
func (m *UpdateChannelInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChannelInfoResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChannelInfoResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelInfoResponseValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChannelInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateChannelInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelInfoResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateChannelInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelInfoResponseMultiError) AllErrors() []error { return m }

// UpdateChannelInfoResponseValidationError is the validation error returned by
// UpdateChannelInfoResponse.Validate if the designated constraints aren't met.
type UpdateChannelInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelInfoResponseValidationError) ErrorName() string {
	return "UpdateChannelInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelInfoResponseValidationError{}

// Validate checks the field values on GetChannelInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelInfoRequestMultiError, or nil if none found.
func (m *GetChannelInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetChannelInfoRequestMultiError(errors)
	}

	return nil
}

// GetChannelInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetChannelInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChannelInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelInfoRequestMultiError) AllErrors() []error { return m }

// GetChannelInfoRequestValidationError is the validation error returned by
// GetChannelInfoRequest.Validate if the designated constraints aren't met.
type GetChannelInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelInfoRequestValidationError) ErrorName() string {
	return "GetChannelInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelInfoRequestValidationError{}

// Validate checks the field values on GetChannelInfoByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelInfoByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelInfoByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelInfoByIdsRequestMultiError, or nil if none found.
func (m *GetChannelInfoByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelInfoByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChannelInfoByIdsRequestMultiError(errors)
	}

	return nil
}

// GetChannelInfoByIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetChannelInfoByIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetChannelInfoByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelInfoByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelInfoByIdsRequestMultiError) AllErrors() []error { return m }

// GetChannelInfoByIdsRequestValidationError is the validation error returned
// by GetChannelInfoByIdsRequest.Validate if the designated constraints aren't met.
type GetChannelInfoByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelInfoByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelInfoByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelInfoByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelInfoByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelInfoByIdsRequestValidationError) ErrorName() string {
	return "GetChannelInfoByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelInfoByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelInfoByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelInfoByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelInfoByIdsRequestValidationError{}

// Validate checks the field values on GetChannelInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelInfoResponseMultiError, or nil if none found.
func (m *GetChannelInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChannelInfoResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChannelInfoResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChannelInfoResponseValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPersonalInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChannelInfoResponseValidationError{
					field:  "PersonalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChannelInfoResponseValidationError{
					field:  "PersonalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersonalInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChannelInfoResponseValidationError{
				field:  "PersonalInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChannelInfoResponseMultiError(errors)
	}

	return nil
}

// GetChannelInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetChannelInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChannelInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelInfoResponseMultiError) AllErrors() []error { return m }

// GetChannelInfoResponseValidationError is the validation error returned by
// GetChannelInfoResponse.Validate if the designated constraints aren't met.
type GetChannelInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelInfoResponseValidationError) ErrorName() string {
	return "GetChannelInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelInfoResponseValidationError{}

// Validate checks the field values on GetChannelInfoByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelInfoByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelInfoByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelInfoByIdsResponseMultiError, or nil if none found.
func (m *GetChannelInfoByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelInfoByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChannel() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChannelInfoByIdsResponseValidationError{
						field:  fmt.Sprintf("Channel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChannelInfoByIdsResponseValidationError{
						field:  fmt.Sprintf("Channel[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelInfoByIdsResponseValidationError{
					field:  fmt.Sprintf("Channel[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChannelInfoByIdsResponseMultiError(errors)
	}

	return nil
}

// GetChannelInfoByIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetChannelInfoByIdsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetChannelInfoByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelInfoByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelInfoByIdsResponseMultiError) AllErrors() []error { return m }

// GetChannelInfoByIdsResponseValidationError is the validation error returned
// by GetChannelInfoByIdsResponse.Validate if the designated constraints
// aren't met.
type GetChannelInfoByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelInfoByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelInfoByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelInfoByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelInfoByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelInfoByIdsResponseValidationError) ErrorName() string {
	return "GetChannelInfoByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelInfoByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelInfoByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelInfoByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelInfoByIdsResponseValidationError{}

// Validate checks the field values on GetChannelMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelMembersRequestMultiError, or nil if none found.
func (m *GetChannelMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return GetChannelMembersRequestMultiError(errors)
	}

	return nil
}

// GetChannelMembersRequestMultiError is an error wrapping multiple validation
// errors returned by GetChannelMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChannelMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelMembersRequestMultiError) AllErrors() []error { return m }

// GetChannelMembersRequestValidationError is the validation error returned by
// GetChannelMembersRequest.Validate if the designated constraints aren't met.
type GetChannelMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMembersRequestValidationError) ErrorName() string {
	return "GetChannelMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMembersRequestValidationError{}

// Validate checks the field values on GetChannelMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelMembersResponseMultiError, or nil if none found.
func (m *GetChannelMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChannelMembersResponseMultiError(errors)
	}

	return nil
}

// GetChannelMembersResponseMultiError is an error wrapping multiple validation
// errors returned by GetChannelMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type GetChannelMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelMembersResponseMultiError) AllErrors() []error { return m }

// GetChannelMembersResponseValidationError is the validation error returned by
// GetChannelMembersResponse.Validate if the designated constraints aren't met.
type GetChannelMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMembersResponseValidationError) ErrorName() string {
	return "GetChannelMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMembersResponseValidationError{}

// Validate checks the field values on CreateOneToOneChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOneToOneChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOneToOneChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOneToOneChannelRequestMultiError, or nil if none found.
func (m *CreateOneToOneChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneToOneChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateOneToOneChannelRequestMultiError(errors)
	}

	return nil
}

// CreateOneToOneChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOneToOneChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOneToOneChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneToOneChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneToOneChannelRequestMultiError) AllErrors() []error { return m }

// CreateOneToOneChannelRequestValidationError is the validation error returned
// by CreateOneToOneChannelRequest.Validate if the designated constraints
// aren't met.
type CreateOneToOneChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneToOneChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneToOneChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneToOneChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneToOneChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneToOneChannelRequestValidationError) ErrorName() string {
	return "CreateOneToOneChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOneToOneChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneToOneChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneToOneChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneToOneChannelRequestValidationError{}

// Validate checks the field values on CreateOneToOneChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOneToOneChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOneToOneChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOneToOneChannelResponseMultiError, or nil if none found.
func (m *CreateOneToOneChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneToOneChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOneToOneChannelResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOneToOneChannelResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOneToOneChannelResponseValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOneToOneChannelResponseMultiError(errors)
	}

	return nil
}

// CreateOneToOneChannelResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOneToOneChannelResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOneToOneChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneToOneChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneToOneChannelResponseMultiError) AllErrors() []error { return m }

// CreateOneToOneChannelResponseValidationError is the validation error
// returned by CreateOneToOneChannelResponse.Validate if the designated
// constraints aren't met.
type CreateOneToOneChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneToOneChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneToOneChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneToOneChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneToOneChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneToOneChannelResponseValidationError) ErrorName() string {
	return "CreateOneToOneChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOneToOneChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneToOneChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneToOneChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneToOneChannelResponseValidationError{}

// Validate checks the field values on CreateOneToOneChannelWith2UserIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOneToOneChannelWith2UserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOneToOneChannelWith2UserIDRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateOneToOneChannelWith2UserIDRequestMultiError, or nil if none found.
func (m *CreateOneToOneChannelWith2UserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneToOneChannelWith2UserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId1

	// no validation rules for UserId2

	if len(errors) > 0 {
		return CreateOneToOneChannelWith2UserIDRequestMultiError(errors)
	}

	return nil
}

// CreateOneToOneChannelWith2UserIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOneToOneChannelWith2UserIDRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOneToOneChannelWith2UserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneToOneChannelWith2UserIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneToOneChannelWith2UserIDRequestMultiError) AllErrors() []error { return m }

// CreateOneToOneChannelWith2UserIDRequestValidationError is the validation
// error returned by CreateOneToOneChannelWith2UserIDRequest.Validate if the
// designated constraints aren't met.
type CreateOneToOneChannelWith2UserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) ErrorName() string {
	return "CreateOneToOneChannelWith2UserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOneToOneChannelWith2UserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneToOneChannelWith2UserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneToOneChannelWith2UserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneToOneChannelWith2UserIDRequestValidationError{}

// Validate checks the field values on CreateOneToOneChannelWith2UserIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOneToOneChannelWith2UserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOneToOneChannelWith2UserIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOneToOneChannelWith2UserIDResponseMultiError, or nil if none found.
func (m *CreateOneToOneChannelWith2UserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneToOneChannelWith2UserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOneToOneChannelWith2UserIDResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOneToOneChannelWith2UserIDResponseValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOneToOneChannelWith2UserIDResponseValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOneToOneChannelWith2UserIDResponseMultiError(errors)
	}

	return nil
}

// CreateOneToOneChannelWith2UserIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOneToOneChannelWith2UserIDResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOneToOneChannelWith2UserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneToOneChannelWith2UserIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneToOneChannelWith2UserIDResponseMultiError) AllErrors() []error { return m }

// CreateOneToOneChannelWith2UserIDResponseValidationError is the validation
// error returned by CreateOneToOneChannelWith2UserIDResponse.Validate if the
// designated constraints aren't met.
type CreateOneToOneChannelWith2UserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) ErrorName() string {
	return "CreateOneToOneChannelWith2UserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOneToOneChannelWith2UserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneToOneChannelWith2UserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneToOneChannelWith2UserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneToOneChannelWith2UserIDResponseValidationError{}

// Validate checks the field values on DisbandOneToOneChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisbandOneToOneChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisbandOneToOneChannelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisbandOneToOneChannelRequestMultiError, or nil if none found.
func (m *DisbandOneToOneChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisbandOneToOneChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return DisbandOneToOneChannelRequestMultiError(errors)
	}

	return nil
}

// DisbandOneToOneChannelRequestMultiError is an error wrapping multiple
// validation errors returned by DisbandOneToOneChannelRequest.ValidateAll()
// if the designated constraints aren't met.
type DisbandOneToOneChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisbandOneToOneChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisbandOneToOneChannelRequestMultiError) AllErrors() []error { return m }

// DisbandOneToOneChannelRequestValidationError is the validation error
// returned by DisbandOneToOneChannelRequest.Validate if the designated
// constraints aren't met.
type DisbandOneToOneChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisbandOneToOneChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisbandOneToOneChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisbandOneToOneChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisbandOneToOneChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisbandOneToOneChannelRequestValidationError) ErrorName() string {
	return "DisbandOneToOneChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisbandOneToOneChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisbandOneToOneChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisbandOneToOneChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisbandOneToOneChannelRequestValidationError{}

// Validate checks the field values on DisbandOneToOneChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisbandOneToOneChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisbandOneToOneChannelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisbandOneToOneChannelResponseMultiError, or nil if none found.
func (m *DisbandOneToOneChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisbandOneToOneChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisbandOneToOneChannelResponseMultiError(errors)
	}

	return nil
}

// DisbandOneToOneChannelResponseMultiError is an error wrapping multiple
// validation errors returned by DisbandOneToOneChannelResponse.ValidateAll()
// if the designated constraints aren't met.
type DisbandOneToOneChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisbandOneToOneChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisbandOneToOneChannelResponseMultiError) AllErrors() []error { return m }

// DisbandOneToOneChannelResponseValidationError is the validation error
// returned by DisbandOneToOneChannelResponse.Validate if the designated
// constraints aren't met.
type DisbandOneToOneChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisbandOneToOneChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisbandOneToOneChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisbandOneToOneChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisbandOneToOneChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisbandOneToOneChannelResponseValidationError) ErrorName() string {
	return "DisbandOneToOneChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisbandOneToOneChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisbandOneToOneChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisbandOneToOneChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisbandOneToOneChannelResponseValidationError{}
