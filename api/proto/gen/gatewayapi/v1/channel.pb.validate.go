// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gatewayapi/v1/channel.proto

package gatewayapiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChannelMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelMessageMultiError,
// or nil if none found.
func (m *ChannelMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	// no validation rules for ContentType

	// no validation rules for Content

	if len(errors) > 0 {
		return ChannelMessageMultiError(errors)
	}

	return nil
}

// ChannelMessageMultiError is an error wrapping multiple validation errors
// returned by ChannelMessage.ValidateAll() if the designated constraints
// aren't met.
type ChannelMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMessageMultiError) AllErrors() []error { return m }

// ChannelMessageValidationError is the validation error returned by
// ChannelMessage.Validate if the designated constraints aren't met.
type ChannelMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelMessageValidationError) ErrorName() string { return "ChannelMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChannelMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelMessageValidationError{}

// Validate checks the field values on ChannelMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelMessageRequestMultiError, or nil if none found.
func (m *ChannelMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelMessageRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelMessageRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelMessageRequestValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChannelMessageRequestMultiError(errors)
	}

	return nil
}

// ChannelMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ChannelMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ChannelMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMessageRequestMultiError) AllErrors() []error { return m }

// ChannelMessageRequestValidationError is the validation error returned by
// ChannelMessageRequest.Validate if the designated constraints aren't met.
type ChannelMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelMessageRequestValidationError) ErrorName() string {
	return "ChannelMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelMessageRequestValidationError{}

// Validate checks the field values on ChannelMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelMessageResponseMultiError, or nil if none found.
func (m *ChannelMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	// no validation rules for SendTime

	// no validation rules for Seq

	if len(errors) > 0 {
		return ChannelMessageResponseMultiError(errors)
	}

	return nil
}

// ChannelMessageResponseMultiError is an error wrapping multiple validation
// errors returned by ChannelMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type ChannelMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMessageResponseMultiError) AllErrors() []error { return m }

// ChannelMessageResponseValidationError is the validation error returned by
// ChannelMessageResponse.Validate if the designated constraints aren't met.
type ChannelMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelMessageResponseValidationError) ErrorName() string {
	return "ChannelMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelMessageResponseValidationError{}

// Validate checks the field values on PushChannelMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushChannelMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushChannelMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushChannelMessageRequestMultiError, or nil if none found.
func (m *PushChannelMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushChannelMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushChannelMessageRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushChannelMessageRequestValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushChannelMessageRequestValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SendId

	// no validation rules for SendTime

	if len(errors) > 0 {
		return PushChannelMessageRequestMultiError(errors)
	}

	return nil
}

// PushChannelMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PushChannelMessageRequest.ValidateAll() if the
// designated constraints aren't met.
type PushChannelMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushChannelMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushChannelMessageRequestMultiError) AllErrors() []error { return m }

// PushChannelMessageRequestValidationError is the validation error returned by
// PushChannelMessageRequest.Validate if the designated constraints aren't met.
type PushChannelMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushChannelMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushChannelMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushChannelMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushChannelMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushChannelMessageRequestValidationError) ErrorName() string {
	return "PushChannelMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushChannelMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushChannelMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushChannelMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushChannelMessageRequestValidationError{}

// Validate checks the field values on PushChannelMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushChannelMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushChannelMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushChannelMessageResponseMultiError, or nil if none found.
func (m *PushChannelMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushChannelMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return PushChannelMessageResponseMultiError(errors)
	}

	return nil
}

// PushChannelMessageResponseMultiError is an error wrapping multiple
// validation errors returned by PushChannelMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type PushChannelMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushChannelMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushChannelMessageResponseMultiError) AllErrors() []error { return m }

// PushChannelMessageResponseValidationError is the validation error returned
// by PushChannelMessageResponse.Validate if the designated constraints aren't met.
type PushChannelMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushChannelMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushChannelMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushChannelMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushChannelMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushChannelMessageResponseValidationError) ErrorName() string {
	return "PushChannelMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushChannelMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushChannelMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushChannelMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushChannelMessageResponseValidationError{}
